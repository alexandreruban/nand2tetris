// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // Decode if I have an A or C instruction
    Not(in=instruction[15], out=Ainstruction); // A instructions starts with 0
    Not(in=Ainstruction, out=Cinstruction);    // C instructions starts with 1

    // When i have an A instruction, I should have access to A register
    Mux16(a=ALUoutput, b=instruction, sel=Ainstruction, out=Aregister);

    // I should load the value in the A register if I have a A instruction or if
    // instruction[5]
    Or(a=Ainstruction, b=instruction[5], out=loadA);
    ARegister(in=Aregister, load=loadA, out=A, out[0..14]=addressM);

    // I should load the ALU output in D if C instruction and instruction[4]
    And(a=Cinstruction, b=instruction[4], out=loadD);
    DRegister(in=ALUoutput, load=loadD, out=D);

    // I should take the value of M if I have a C instruction with instruction[12]
    // set to 1
    And(a=Cinstruction, b=instruction[12], out=takeM);
    Mux16(a=A, b=inM, sel=takeM, out=AorM);

    ALU(
      x=D,
      y=AorM,
      zx=instruction[11],
      nx=instruction[10],
      zy=instruction[9],
      ny=instruction[8],
      f=instruction[7],
      no=instruction[6],
      out=outM,
      out=ALUoutput,
      zr=zr,
      ng=ng
    );

    // I should write M only if I have a C instruction and instruction[3]
    And(a=Cinstruction, b=instruction[3], out=writeM);

    // I should load the PC based on the 3 jump bits value and the ng, zr ALU output bits
    // I should jump if (d2.zr)+(d3.not(ng).not(zr))+(d1.ng)
    // d1=instruction[2], d2=instruction[1], d3=instruction[0]

    And(a=instruction[1], b=zr, out=d2Andzr);
    Not(in=ng, out=Notng);
    Not(in=zr, out=Notzr);
    And(a=instruction[0], b=Notng, out=d3AndNotng);
    And(a=d3AndNotng, b=Notzr, out=d3AndNotngAndNotzr);
    And(a=instruction[2], b=ng, out=d1Andng);
    Or(a=d2Andzr, b=d3AndNotngAndNotzr, out=d2AndzrOrd3AndNotng);
    Or(a=d2AndzrOrd3AndNotng, b=d1Andng, out=LoadPCbefore);
    And(a=LoadPCbefore, b=Cinstruction, out=LoadPC);

    PC(in=A , load=LoadPC, inc=true, reset=reset, out[0..14]=pc);
}
